#pragma config(Sensor, port3,  Gyro,           sensorVexIQ_Gyro)
#pragma config(Sensor, port10, LED,            sensorVexIQ_LED)
#pragma config(Motor,  motor4,          FrontClaw,     tmotorVexIQ, PIDControl, reversed, encoder)
#pragma config(Motor,  motor5,          RightDrive,    tmotorVexIQ, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motor6,          Convayor,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor11,         LeftDrive,     tmotorVexIQ, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motor12,         BackLock,      tmotorVexIQ, PIDControl, reversed, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//The circomfrince of the wheel is 7.85
// 1 rotation is 7.85 inches
// 1 rotation is 360 degrees

void forwardMove(int distance, int speed){
	moveMotorTarget(LeftDrive, distance, speed);
  moveMotorTarget(RightDrive, distance, speed);
  //Holds program flow until the motor on port 1 comes to a complete stop.
  waitUntilMotorStop(LeftDrive);
  waitUntilMotorStop(RightDrive);
}
void backwardMove(int distance, int speed){
	moveMotorTarget(LeftDrive, -distance, -speed);
  moveMotorTarget(RightDrive, -distance, -speed);
  //Holds program flow until the motor on port 1 comes to a complete stop.
  waitUntilMotorStop(LeftDrive);
  waitUntilMotorStop(RightDrive);
}

void turnRightDist(float deg, int speed){
	resetGyro(Gyro);
	motor[LeftDrive] = speed;
	motor[RightDrive] = -speed;
	waitUntil(getGyroDegreesFloat(Gyro) <= -deg);
	stopMotor(LeftDrive);
	stopMotor(RightDrive);
	if(getGyroDegreesFloat(Gyro) < -deg) {
		motor[LeftDrive] = -10;
		motor[RightDrive] = 10;
		waitUntil(getGyroDegreesFloat(Gyro) >= -deg);
		stopMotor(LeftDrive);
		stopMotor(RightDrive);
	}
}

void turnLeftDist(float deg, int speed){
  resetGyro(Gyro);
	motor[LeftDrive] = -speed;
	motor[RightDrive] = speed;
	waitUntil(getGyroDegreesFloat(Gyro) >= deg);
	stopMotor(LeftDrive);
	stopMotor(RightDrive);

	if(getGyroDegreesFloat(Gyro) > deg) {
		motor[LeftDrive] = 10;
		motor[RightDrive] = -10;
		waitUntil(getGyroDegreesFloat(Gyro) <= deg);
		stopMotor(LeftDrive);
		stopMotor(RightDrive);
	}

}

void waitForTouch(){
	setTouchLEDColor(LED, colorRed);
	waitUntil(getTouchLEDValue(LED) == 1);
	setTouchLEDColor(LED, colorGreen);
}

//task main()
//{
//	waitForTouch();
//	turnLeftDist(90, 100);
//	turnRightDist(45,50);
//
//}


//Grab the first GREEN BOX



void firstGreen(){
	motor[Convayor] = 100;
	moveMotorTarget(FrontClaw, -1000, -100);
	forwardMove(12,50);
	turnRightDist(20,60);
	sleep(200);
	forwardMove(120,30);
  turnLeftDist(15,20);
	forwardMove(40,30);
  turnLeftDist(10,20);
  turnLeftDist(17,20);
	forwardMove(80,30);
  moveMotorTarget(FrontClaw, 900, 50);
	sleep(400);
  turnRightDist(19,60);
	forwardMove(300,30);
	moveMotorTarget(FrontClaw, -370, -50);
	waitUntilMotorStop(FrontClaw);
	sleep(200);
	forwardMove(40,50);

}
/*
void firstGreen(){
	moveMotorTarget(FrontClaw, -1000, -100);
	forwardMove(5,50);
	turnRightDist(90,60);
	wait(.2, seconds);
	forwardMove(275,30);
  turnLeftDist(135,60);
	sleep(10000)

  wait(.2, seconds);
  forwardMove(155,30);
//	waitUntilMotorStop(LeftDrive);
  moveMotorTarget(FrontClaw, 900, 50);
	//waitUntilMotorStop(FrontClaw);
  forwardMove(180, 30);
  wait(.2, seconds);
  turnRightDist(70,40);
  wait(.2, seconds);
  forwardMove(207,50);
	moveMotorTarget(FrontClaw, -400, -50);
	waitUntilMotorStop(FrontClaw);
	wait(.2, seconds);
	forwardMove(40,50);
	backwardMove(515,50);
}*/


//Grab the second Green Box
void secondGreen(){

	backwardMove(70,50);
  turnRightDist(90,40);
	forwardMove(290,50);
	moveMotorTarget(FrontClaw, -400, -50);
	sleep(400);
  turnRightDist(50,40);
	forwardMove(70,30);
	moveMotorTarget(FrontClaw, 800, 50);
	sleep(400);
	forwardMove(220,30);
  turnRightDist(75,40);
	forwardMove(260,30);
	sleep(2000);
	moveMotorTarget(FrontClaw, -200, -10);
	sleep(500);
	backwardMove(200,50);
	sleep(20000);
	

}

//Grab the third green box
void thridGreen(){
	moveMotorTarget(FrontClaw, -1000, -100);
	turnLeftDist(100,60);
  forwardMove(270,30);
  turnRightDist(168,60);
  wait(.2, seconds);
  forwardMove(130,30);
  moveMotorTarget(FrontClaw, 1000, 100);
  forwardMove(190, 30);
  wait(.2, seconds);
  turnLeftDist(68,40);
  wait(.2, seconds);
  forwardMove(212,50);
	moveMotorTarget(FrontClaw, -400, -50);
	waitUntilMotorStop(FrontClaw);
	forwardMove(40,50);
	backwardMove(215,50);
	wait(1, seconds);
}

void blueCubes(){
	///pick up blues
	moveMotorTarget(FrontClaw, -450, -50);
  turnRightDist(146,40);
	wait(.2, seconds);
	forwardMove(322,50);
  turnLeftDist(146,40);
	wait(.2, seconds);
	forwardMove(150,50);
  moveMotorTarget(FrontClaw, 500, 100);
  wait(.3, seconds);
	backwardMove(250,50);
  turnLeftDist(10,40);
  wait(.2, seconds);
	backwardMove(60,20);
  moveMotorTarget(BackLock, 150, 60);
  wait(.5, seconds);
  ///move accross field
  turnLeftDist(60,40);
  wait(.2, seconds);
	forwardMove(150,50);
  turnLeftDist(80,40);
  wait(.2, seconds);
	forwardMove(50,50);
  turnLeftDist(10,40);
	forwardMove(800,50);
  ///place blues
  turnLeftDist(60,40);
  moveMotorTarget(FrontClaw, -150, 100);
	forwardMove(450,50);
  moveMotorTarget(FrontClaw, -150, 100);
  turnRightDist(10,50);
  forwardMove(255,50);
	moveMotorTarget(FrontClaw, -150, 100);
	backwardMove(250,50);
  turnLeftDist(126,40);
	backwardMove(550,50);
  moveMotorTarget(BackLock, -150, 100);
	}

task main()
{
	setTouchLEDColor(LED, colorRed);
	waitUntil(getTouchLEDValue(LED) == 1);
	setTouchLEDColor(LED, colorGreen);
	firstGreen();
//	setTouchLEDColor(LED, colorRed);
//	waitUntil(getTouchLEDValue(LED) == 1);
//	setTouchLEDColor(LED, colorGreen);
	secondGreen();
	setTouchLEDColor(LED, colorRed);
	waitUntil(getTouchLEDValue(LED) == 1);
	setTouchLEDColor(LED, colorGreen);
	
  //THIS IS WHERE WE ARE
  
  //thridGreen();
	//blueCubes();
	int counter = 0;
	repeat(255) {
		setTouchLEDHue(LED, counter);
		sleep(30);
		counter =  counter + 1;
	}
}
// setMotor(Convayor, -80);
